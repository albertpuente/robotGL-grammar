
<<<<<<< HEAD
void rgl_buildMap() {
    exec( action(OBSTACLE, 0, 1) );
    exec( action(OBSTACLE, 0, 3) );
    exec( action(OBSTACLE, 0, 5) );
    exec( action(OBSTACLE, 0, 7) );
    exec( action(OBSTACLE, 0, 9) );
    exec( action(OBSTACLE, 1, 1) );
    exec( action(OBSTACLE, 1, 3) );
    exec( action(OBSTACLE, 1, 5) );
    exec( action(OBSTACLE, 1, 7) );
    exec( action(OBSTACLE, 1, 9) );
    exec( action(OBSTACLE, 2, 1) );
    exec( action(OBSTACLE, 2, 3) );
    exec( action(OBSTACLE, 2, 7) );
    exec( action(OBSTACLE, 2, 9) );
    exec( action(OBSTACLE, 3, 1) );
    exec( action(OBSTACLE, 3, 3) );
    exec( action(OBSTACLE, 3, 5) );
    exec( action(OBSTACLE, 3, 7) );
    exec( action(OBSTACLE, 3, 9) );
    exec( action(OBSTACLE, 4, 1) );
    exec( action(OBSTACLE, 4, 3) );
    exec( action(OBSTACLE, 4, 5) );
    exec( action(OBSTACLE, 4, 7) );
    exec( action(OBSTACLE, 5, 1) );
    exec( action(OBSTACLE, 5, 3) );
    exec( action(OBSTACLE, 5, 5) );
    exec( action(OBSTACLE, 5, 7) );
    exec( action(OBSTACLE, 5, 9) );
    exec( action(OBSTACLE, 6, 1) );
    exec( action(OBSTACLE, 6, 3) );
    exec( action(OBSTACLE, 6, 5) );
    exec( action(OBSTACLE, 6, 7) );
    exec( action(OBSTACLE, 6, 9) );
    exec( action(OBSTACLE, 7, 1) );
    exec( action(OBSTACLE, 7, 3) );
    exec( action(OBSTACLE, 7, 5) );
    exec( action(OBSTACLE, 7, 7) );
    exec( action(OBSTACLE, 7, 9) );
    exec( action(OBSTACLE, 8, 1) );
    exec( action(OBSTACLE, 8, 3) );
    exec( action(OBSTACLE, 8, 5) );
    exec( action(OBSTACLE, 8, 7) );
    exec( action(OBSTACLE, 8, 9) );
    exec( action(OBSTACLE, 9, 1) );
    exec( action(OBSTACLE, 9, 3) );
    exec( action(OBSTACLE, 9, 5) );
    exec( action(OBSTACLE, 9, 7) );
    exec( action(OBSTACLE, 9, 9) );
    exec( action(OBSTACLE, 10, 5) );
    exec( action(OBSTACLE, 10, 9) );
    exec( action(BOX, 3, 0) );
}

void rgl_moveinf() {
    while (not detectDirection(0)) {
=======
void rgl_moveBackwards(int x) {
    exec( action(MOVE_FORWARD, x) );
}

void rgl_tomato(int y) {
    if (y < 5) {
        rgl_tomato(y + 1);
        exec( action(ROTATE, angleActual() + 90) );
>>>>>>> e3315483fb7fe428000e633b471b678fe51db070
        exec( action(MOVE_FORWARD, 1) );
    }
}

<<<<<<< HEAD
void rgl_fetch() {
    while (not detectDirection(0)) {
        exec( action(MOVE_FORWARD, 1) );
    }
    exec( action(PICK_OBJECT) );
}

void rgl_traverse() {
    while (not detectDirection(90) and not detectDirection(-90)) {
        if (detectDirection(0)) {
            exec( action(ROTATE, angleActual() + 180) );
        }
        exec( action(MOVE_FORWARD, 1) );
    }
    if (detectDirection(90)) {
        exec( action(ROTATE, angleActual() + 270) );
    }
    else {
        exec( action(ROTATE, angleActual() + 90) );
    }
    exec( action(MOVE_FORWARD, 2) );
    exec( action(ROTATE, angleActual() + 90) );
    if (R.getIntX() != 10 or R.getIntZ() != 10) {
        rgl_traverse();
    }
}

void actions() {
    R = robot(0, 0, 0);
    rgl_buildMap();
    rgl_fetch();
    rgl_traverse();
=======
void actions() {
    R = robot(0, 0, 90);
    exec( action(MOVE, 0, 1) );
    exec( action(MARK, 0, 2) );
    exec( action(BOX, 0, 2) );
    exec( action(BOX, 1, 2) );
    exec( action(PICK_OBJECT) );
    exec( action(MOVE, 0, 1) );
    exec( action(RELEASE_OBJECT) );
>>>>>>> e3315483fb7fe428000e633b471b678fe51db070
    finish = true;
}
